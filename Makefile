# list of module
DIRECTORIES = Utils Decoders Solvers

# what to use to generate the doc
DOC_GEN = pydoc

# makes the code cleaner by handling verbosity within these variables
VERBOSE_1 = ;
VERBOSE_0 = > /dev/null ;
V = 0
VERBOSE = $(VERBOSE_$(V))

# help getting printed out when no command is specified
help:
	$(info make doc [V=1]: grenerate the documentation of the project (html), set V to 1 for a verbose output)
	$(info make clean: cleans the generated documentation)
	$(info )

# generates the documentation of the whole project, stored in doc/
doc:

	# simply checking if the folder doc already exists
	@if [ ! -d doc/ ]; then mkdir doc; fi 

	# generating the doc for every module (can't comment in multiline)
	# 1 -> generate the doc
	# first if -> create a directory in doc/ with the module's name (if it doesn't exist)
	# second if -> if an init file has had its documentation generated, remove it (it would be 
	# an empty file)
	# finally -> move the doc in the correct file
	@for dir in $(DIRECTORIES); do \
		$(DOC_GEN) -w src/$$dir/*.py $(VERBOSE) \
		\
		if [ ! -d doc/$$dir ]; then \
			mkdir doc/$$dir $(VERBOSE) \
		fi ; \
		\
		if [ -f __init__.html ]; then \
			rm __init__.html $(VERBOSE) \
		fi ; \
		\
		mv *.html doc/$$dir/ ;\
	done

	# removes all the junk generated by pydoc (you can comment it if you want
	# it should make generating the doc faster if you generate it multiple times)
	@rm -rf **/*.pyc
	@rm -rf **/**/*.pyc
	@rm -rf **/__pycache__/
	@rm -rf **/**/__pycache__

# removes the doc folder
clean:
	@rm -rf doc/

# so each command can be called all the time (otherwise Makefile waits for 
# a change in the args, which will never happen since no args are given)
.PHONY: all doc clean